package com.walker.apt.proxy;

import java.util.Set;

import javax.lang.model.element.TypeElement;

/**
 * Created by walkerzpli on 2022/1/18.
 */
public class EncoderRegisterCreatorProxy {

    public static final String SUFFIX = "";

    private static final String TAB_SPACE = "    ";

    private String mOriginClassName;
    private String mTargetClassName;
    private String mPackageName;
    private TypeElement mTypeElement;
    private Set<String> mEncoderSet;

    public EncoderRegisterCreatorProxy(String packageName, String className, Set<String> encoders) {
        this.mPackageName = packageName;
        this.mOriginClassName = className;
        this.mTargetClassName = className + SUFFIX;
        this.mEncoderSet = encoders;
    }

    public String generateJavaCode() {
        StringBuilder builder = new StringBuilder();
        builder.append("package ").append(mPackageName).append(";\n\n");
        generateImport(builder);
        builder.append("import com.walker.storage.winkkv.encoder.EncoderManager;\n");

        builder.append("/**\n * This class is generated by IDE, do not edit.\n */\n");
        builder.append("public class EncoderUtil {").append('\n');
        generateMethods(builder);
        builder.append("}\n");
        return builder.toString();
    }

    private void generateImport(StringBuilder builder) {
        for (String encoder : mEncoderSet) {
            builder.append("import ").append(encoder).append(";\n");
        }
    }

    private void generateRegisterCode(StringBuilder builder) {
        for (String encoder : mEncoderSet) {
            builder.append("        EncoderManager.g().registerEncoder(").append(encoder).append(".INSTANCE);").append('\n');
        }
    }

    private void generateMethods(StringBuilder builder) {
        builder.append("    public static void init() {").append('\n');
        generateRegisterCode(builder);
        builder.append("    }").append('\n');
    }

    public String getProxyClassFullName() {
        return mPackageName + "." + mTargetClassName;
    }

    public TypeElement getTypeElement() {
        return mTypeElement;
    }

}
